from pickle import NONE
import requests

KEYSYMS_URL = "https://gitlab.freedesktop.org/xorg/proto/xorgproto/-/raw/master/specs/xproto/keysyms.xml"

# attempt to open cached version of 'keysyms.xml'
# if it doesn't exist, download and cache it

xml = None

try:
	with open("keysyms.xml") as f:
		xml = f.read()

except FileNotFoundError:
	with open("keysyms.xml", "w") as f:
		xml = requests.get(KEYSYMS_URL).text
		f.write(xml)

# parse XML

import xml.etree.ElementTree as libxml
keysyms = libxml.ElementTree(libxml.fromstring(xml)).getroot()

src = """
// this file is automatically generated by 'aquabsd.alps/aquabsd.alps.kbd/map/gen.py' from the X11 keysyms spec
// if you need to update this (you probably won't ever), delete 'keysyms.xml' and run 'gen.py'

static inline const char* __map_x11_to_aqua(int key) {
	switch (key) {
"""

# actual parsing functions

has_case = []

def parse_row(row):
	global src

	sym = 0
	name = "void"
	bits = []

	for tag in row:
		if tag.tag != "entry":
			continue

		if tag.text is not None and tag.text[:2] == "#x":
			sym = int(tag.text[2:], 16)
			continue

		# special keysyms

		if len(tag) and tag[0].tag == "keysym":
			# 'tag[0].text' can either be 'VoidSymbol' or 'NoSymbol'
			# both are mapped to 'void' in AQUA

			break

		bits.append(tag.text)

	if sym in has_case:
		return

	# parse bits

	unicode = None
	set_ = None

	if len(bits) == 3:
		unicode = bits[0]
		name = bits[1]
		set_ = bits[2]

	elif len(bits) == 2:
		name = bits[0]
		set_ = bits[1]

	else:
		print(" ".join(bits))
		return

	# parse name

	name = name.lower()
	name = name.split(',')[0]
	name = name.replace(' ', '.')
	name = name.replace('"', '')
	name = name.replace('-', '_')
	name = name.replace('/', '_')
	name = name.replace('(', '')
	name = name.replace(')', '')

	has_case.append(sym)
	src += f"""	case {hex(sym)}: return "{name}"; // {set_}{f" ({unicode})" if unicode is not None and unicode != '-' else ""}
"""

def parse_table(table):
	for tag in table:
		if tag.tag != "tgroup":
			continue

		for tag in tag:
			if tag.tag != "tbody":
				continue

			for tag in tag:
				if tag.tag != "row":
					continue

				parse_row(tag)

def parse_sect(sect):
	global src

	for tag in sect:
		if tag.tag == "title":
			src += f"""
	// {tag.text}

"""

		elif tag.tag == "informaltable":
			parse_table(tag)

for tag in keysyms:
	if tag.tag == "para":
		print(tag.text)

	elif tag.tag == "sect1":
		parse_sect(tag)

# write to output file

src += """
	default: return "void";
	}
}
"""

with open("map.h", "w") as f:
	f.write(src)
